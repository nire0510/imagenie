{"name":"Imagenie","tagline":"Image manipulation made easy! (JavaScript library)","body":"# Imagenie - Image manipulation made easy!\r\n\r\nImagenie is a JavaScript library which helps web developers and designers to manipulate or explore\r\nimages in web pages easily and directly, without having to edit it offline with graphic design softwares.\r\n\r\n## Installation\r\nTo get going with Imagenie:\r\n1. Install via bower: bower install imagenie --save\r\n2. Add imagenie.min.js to your web page:  \r\n`<script src=\"bower_components/imagenie/dist/imagenie.min.js\"></script>`\r\n\r\n## Quick start\r\nThe first thing to do is to tell Imagenie which images you want to edit or query (you can either select a single element or multiple elements to work on simultaneously).  This can be done by creating a new instance of Imagenie, which its argument could be on of the following:\r\n* CSS selector:  \r\n`var ig = new Imagenie('.someSection img');`\r\n* Element or a node list:  \r\n`var ig = new Imagenie(document.getElementById('myImage'));`\r\n\r\n## Imagemin commands\r\nImagenie can either query images for some information, such as size or transparency, or to manipulate images: resize it, swap one color with another, add alpha (opacity) channel or even crop it.  \r\nTo keep samples simple, let's assume that we have a variable `ig` which is an instance of the following command `new Imagenie(document.getElementById('myImage'));`\r\n\r\n### Query images\r\n* **`pixel(intX, intY)`** - Gets image(s) pixel RGBA values in specific location.\r\n  * intX {integer: 0<=} X coordinate\r\n  * intY {integer: 0<=} Y coordinate\r\n\r\n  Returns array of objects, one per image:\r\n  * R {integer: 0-255} - red component value in pixel\r\n  * G {integer: 0-255} - green component value in pixel\r\n  * B {integer: 0-255} - blue component value in pixel\r\n  * A {integer: 0-255} - alpha (transparency) component value in pixel\r\n\r\n  Sample:\r\n  ```javascript\r\n  var color = ig.pixel(120, 150); // => [{R: 0, G: 255, B: 0, A: 255}]\r\n  ```\r\n\r\n* **`size()`** - Gets image(s) dimension.\r\nReturns array of objects, one per image:\r\n  * src {string} - image path\r\n  * displayWidth {integer} - image width as seen in web page\r\n  * displayHeight {integer} - image height as seen in web page\r\n  * naturalWidth {integer} - original image width\r\n  * naturalHeight {integer} - original image height\r\n\r\n  Sample:\r\n  ```javascript\r\n  var size = ig.size();\r\n  /*\r\n  => [{\r\n    src: 'http://www.somesite.com/images/myImage.png',\r\n    displayWidth: 200,\r\n    displayHeight: 200,\r\n    naturalWidth: 400,\r\n    naturalHeight: 400\r\n  }]\r\n  */\r\n  ```\r\n\r\n* **`transparency()`** - Checks if image contains alpha channel.\r\nReturns array of booleans, one per image: **true** if image contains alpha channel (has transparent areas), **false** otherwise\r\n  Sample:\r\n  ```javascript\r\n  var isTransparent = ig.transparency(); // => [false]\r\n  ```\r\n\r\n### Manipulate images\r\nAs mentioned above, Imagenie helps you also modify images on-the-fly; Images are immediately affected after execution. Also, notice that all commands in this section are chain-able, which means you can call few of them in a single call. Let's see those commands!\r\n\r\n* **`reset()`** - Resets image to its original state. Useful when chaining few commands.\r\n* **`invert()`** - Inverts image(s) colors.\r\n* **`grayscale()`** - Converts image(s) colors to grayscale.\r\n* **`alpha(dcmOpacity, blnIgnoreTransparent)`** - Sets alpha channel to all pixels in image(s).  \r\n  * `dcmOpacity` {decimal: 0-1} - Opacity level\r\n  * `blnIgnoreTransparent` {boolean} - When set to true, fully transparent pixels opacity won't be overwritten\r\n* **`swap(objFromColor, objToColor)`** - Swaps one color to another in image(s).  \r\n  * `objFromColor` {object: {r,g,b,a}} - RGBA value to search for. Notice that you don't have to specify all properties\r\n  * `objToColor` {object: {r,g,b,a}} - RGBA value to replace with\r\n* **`mirror()`** - Flips image(s) horizontally.\r\n* **`rotate(intDegrees)`** - Rotates image(s)  \r\n  * `intDegrees` {integer: 0-360} - The rotation angle in degrees\r\n* **`resize(intWidth, intHeight)`** - Resizes image(s).  \r\n  * `intWidth` {number: 0<} - Image new width\r\n  * `intHeight` {number: 0<} - Image new height\r\n* **`scale(dcmFactor)`** - Scales image (preserves ratio).  \r\n  * `dcmFactor` {decimal: 0<} - Scaling factor\r\n* **`crop(intX, intY, intWidth, intHeight)`** - Crops image(s).  \r\n  * `intX` {integer: 0<} - X coordinate where to start clipping\r\n  * `intY` {integer: 0<} - Y coordinate where to start clipping\r\n  * `intWidth` {integer: 0<} - How many pixels to take horizontally\r\n  * `intHeight` {integer: 0<} - How many pixels to take vertically","google":"UA-59986680-2","note":"Don't delete this file! It's used internally to help with page regeneration."}